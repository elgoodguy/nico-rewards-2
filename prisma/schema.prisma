// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
datasource db {
  provider = "sqlite"
  url      = "file:dev.sqlite"
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

// Customer rewards tracking
model Customer {
  id               String            @id @default(cuid())
  shopifyCustomerId String
  shop             String
  email            String?
  firstName        String?
  lastName         String?
  totalPoints      Int               @default(0)
  totalSpent       Float             @default(0)
  membershipTier   TierLevel         @default(BRONZE)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relations
  transactions     PointTransaction[]
  redemptions      Redemption[]
  
  @@unique([shopifyCustomerId, shop])
}

// Membership tiers with configurable benefits
model MembershipTier {
  id          String @id @default(cuid())
  name        String
  shop        String
  cashbackRate Float  // Percentage as decimal (e.g., 0.02 for 2%)
  minSpent    Float  // Minimum amount spent to reach this tier
  color       String @default("#808080")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  // customers   Customer[]  // Removed direct relation
  
  @@unique([name, shop])
}

enum TierLevel {
  BRONZE
  SILVER
  GOLD
}

// Point transactions (earning and spending)
model PointTransaction {
  id          String            @id @default(cuid())
  customerId  String
  shop        String
  points      Int               // Positive for earning, negative for spending
  type        TransactionType
  orderId     String?           // Shopify order ID if from purchase
  amount      Float?            // Order amount if from purchase
  description String?
  createdAt   DateTime          @default(now())
  
  // Relations
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@index([customerId])
  @@index([shop])
}

enum TransactionType {
  EARNED_PURCHASE    // Points earned from purchase
  EARNED_SIGNUP      // Bonus points for signup
  EARNED_REFERRAL    // Points from referral
  REDEEMED          // Points spent on redemption
  ADJUSTED          // Manual adjustment by admin
}

// Redemption options configuration
model RedemptionOption {
  id           String       @id @default(cuid())
  shop         String
  name         String
  description  String?
  pointsCost   Int
  type         RedemptionType
  value        Float        // Discount amount or percentage
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  redemptions  Redemption[]
  
  @@index([shop])
}

enum RedemptionType {
  PERCENTAGE_DISCOUNT  // Percentage off order
  FIXED_DISCOUNT      // Fixed amount off order
  FREE_SHIPPING       // Free shipping
  FREE_PRODUCT        // Free specific product
}

// Customer redemptions
model Redemption {
  id               String          @id @default(cuid())
  customerId       String
  shop             String
  optionId         String
  pointsSpent      Int
  discountCode     String?         // Generated Shopify discount code
  orderId          String?         // Order where used
  status           RedemptionStatus @default(PENDING)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  expiresAt        DateTime?
  
  // Relations
  customer         Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  option           RedemptionOption @relation(fields: [optionId], references: [id])
  
  @@index([customerId])
  @@index([shop])
}

enum RedemptionStatus {
  PENDING    // Created but not used
  USED       // Successfully used
  EXPIRED    // Expired without use
  CANCELLED  // Cancelled by admin
}

// App configuration per shop
model AppConfig {
  id                String    @id @default(cuid())
  shop              String    @unique
  isActive          Boolean   @default(true)
  welcomeBonus      Int       @default(100)       // Points given on signup
  referralBonus     Int       @default(200)       // Points for referrals
  widgetColor       String    @default("#000000")
  widgetPosition    String    @default("bottom-right")
  tierEvaluationDays Int      @default(365)       // Days to look back for tier calculation
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}
